# Import custom classes
# from data_package import *
from model_package import *
from fit_package import *
from plot_package import *

import astropy

if __name__ == "__main__":


	
	#### Generating synthetic data from empirical models 
	# input_model = Blackbody(norm=10) + Band()
	# input_model[0].color='r'
	input_model = astropy.modeling.powerlaws.PowerLaw1D(amplitude=500)
	num = 120 # Number of data points 
	energy_points = np.logspace(0,4,num) # Make energy axis 

	# Initialize the data array to be printed
	input_array = np.zeros(shape=num,dtype=[("ENERGY",float),("RATE",float),('ERR',float)])
	input_array['ENERGY'] = energy_points # set energy axis
	input_array['RATE'] = input_model(energy_points) # Evaluate the model at each energy 
	input_array['RATE'] = np.random.normal(loc=input_array['RATE'],scale=np.sqrt(input_array['RATE'])) # Add Gaussian fluctuations
	input_array['RATE'][input_array['RATE']<0] *=-1 # Remove negative fluctuations
	input_array['ERR'] = np.sqrt(input_array['RATE']) # Calculate errors 

	### Fitting synthetic data generated above

	# Initialize a data class object
	data_inst = Data()
	# Set spectrum 
	data_inst.set_spectrum(input_array)

	ax = plt.figure().gca()

	# Initialize a two-component model with default parameters
	"""
	Defaults: 
		BB_temp 	= 20 
		BB_alpha 	= -0.4
		BB_norm 	= 1
		Band_e0 	= 1e3
		Band_alpha 	= -1
		Band_beta 	= -2.5
		Band_norm 	= 1
	"""
	# model = Blackbody() + Band()
	# model[0].color = "r" # Make the thermal component a red color when plotting
	# model[0].alpha.fixed = True # Fix the spectral index of the thermal component
	# model[1].alpha.fixed = True # Fix the low energy power law index of the Band component
	# model[1].beta.fixed = True # Fix the high energy power law index of the Band component

	model = astropy.modeling.powerlaws.PowerLaw1D()
	model.x_0.fixed = True

	# Initialize the fitter
	fitter = FittedModel()
	# Perform the fit 
	# By specifying "verbose=True", the best fit parameter and reduced chi-squared will be printed to the terminal
	best_fit_model, fitstat = fitter.fit(model, data_inst.spectrum,verbose=True)

	# Plot the data 
	plot_data_spec(data_inst.spectrum,ax=ax,spec_type=0,alpha=0.5)
	# Plot the input model used the generate the data
	plot_model_spec(input_model,emin=data_inst.spectrum['ENERGY'][0],emax=data_inst.spectrum['ENERGY'][-1], ax=ax,inc_comps=True,spec_type=0,linestyle="dashdot",comp_linestyle="dashdot",alpha=0.6)
	# Plot the best-fit model
	plot_model_spec(best_fit_model,emin=data_inst.spectrum['ENERGY'][0],emax=data_inst.spectrum['ENERGY'][-1], ax=ax,inc_comps=True,spec_type=0,linewidth=3,comp_linewidth=3)

	plt.show()



	"""
	### Trying to fit data generated by the simulation code 


	fn = []
	fn.append('../files-data/synthetic-data/synthGRB_spec_TOT_0.txt')
	fn.append('../files-data/synthetic-data/synthGRB_spec_TOT_1.txt')
	fn.append('../files-data/synthetic-data/synthGRB_spec_TOT_2.txt')
	
	tstart = [0,1,2]
	tend = [1,2,3]
	colors= ["C0","C1","C2"]

	data = []
	data_inst = Data()
	ax = plt.figure().gca()
	for i in range(len(fn)):
		
		data.append(np.genfromtxt(fn[i],dtype=[("ENERGY",float),("RATE",float),("ERR",float)]))
		data[i]['ERR'] = np.sqrt(data[i]['RATE'])
		np.savetxt(fn[i],data[i])

		data_inst.load_spectrum(fn[i],tstart[i],tend[i])

		# plot_data_spec(data_inst.spectra[i]['SPECTRUM'],ax=ax,color=colors[i],spec_type=2)

		# model = Blackbody(temp=40,alpha=0.4,norm=3e3) + Band(e0=5e2,alpha=-1.1,beta=-2.05,norm=10812.635)
		# model = Blackbody(temp=20,alpha=0.4,norm=5e5) + Band(e0=5e3,alpha=-1.1,beta=-2.5,norm=5e4)
		model = Blackbody(temp=35,alpha=0.4,norm=3e4) + Band(e0=1e3,alpha=-1.1,beta=-2.3,norm=3e4)
		model[0].alpha.fixed = True
		model[0].color = colors[i]
		model[1].color = "white"
		model.color=colors[i]
		fitter = FittedModel()
		best_fit_model, fitstat = fitter.fit(model, data_inst.spectra[i]['SPECTRUM'],verbose=True)

		plot_data_spec(data_inst.spectra[i]['SPECTRUM'],ax=ax,color=colors[i],spec_type=2)
		plot_model_spec(best_fit_model,ax=ax,inc_comps=True,spec_type=2)

	plt.show()
	"""
